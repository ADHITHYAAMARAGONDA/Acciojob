Multi-Component Generator Platform – System Architecture

Architecture Diagram Structure :

┌─────────────────────────────────────────────────────────────────────────────────┐
│                    COMPONENT & MULTI-COMPONENT GENERATOR PLATFORM              │
│                              SYSTEM ARCHITECTURE                               │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   User          │    │   Frontend      │    │   Backend       │
│   Browser       │───►│   (React/Vite)  │───►│   (Express.js)  │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Authentication│    │   State         │    │   Controllers   │
│   (Login/Reg)   │───►│   Management    │───►│   (Auth/Chat)   │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Protected     │    │   API           │    │   Middleware    │
│   Routes        │───►│   Services      │───►│   (JWT/CORS)    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Chat          │    │   AI            │    │   Database      │
│   Interface     │───►│   Integration   │───►│   (MongoDB)     │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Live          │    │   Component     │    │   Session       │
│   Preview       │◄───│   Generation    │◄───│   Management    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Code          │    │   Auto-Save     │    │   Data          │
│   Export        │◄───│   (Real-time)   │◄───│   Persistence   │
└─────────────────┘    └─────────────────┘    └─────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              DEPLOYMENT ARCHITECTURE                           │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Developer     │    │   GitHub        │    │   Auto-Deploy   │
│   Push Code     │───►│   Repository    │───►│   Triggers      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Code Review   │    │   Branch        │    │   Build & Test  │
│   & Merge       │───►│   Protection    │───►│   Process       │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Vercel        │    │   Render        │    │   Health        │
│   Frontend      │    │   Backend       │    │   Checks        │
│   Deploy        │    │   Deploy        │    │   & Monitoring  │
└─────────────────┘    └─────────────────┘    └─────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              EXTERNAL SERVICES                                  │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Google        │    │   MongoDB       │    │   Vercel        │
│   Gemini AI     │    │   Atlas         │    │   (Frontend)    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         ▲                       ▲                       ▲
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   AI Component  │    │   Cloud         │    │   Global CDN    │
│   Generation    │    │   Database      │    │   & SSL         │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   JSX/CSS       │    │   User &        │    │   Performance   │
│   Output        │    │   Session Data  │    │   Optimization  │
└─────────────────┘    └─────────────────┘    └─────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              SECURITY LAYERS                                   │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Frontend      │    │   API Gateway   │    │   Backend       │
│   Security      │    │   Security      │    │   Security      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   HTTPS Only    │    │   CORS Policy   │    │   JWT Tokens    │
│   Input         │    │   Rate Limiting │    │   Password      │
│   Validation    │    │   Request       │    │   Hashing       │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   XSS           │    │   API Key       │    │   Environment   │
│   Protection    │    │   Protection    │    │   Variables     │
│   CSRF          │    │   Input         │    │   Database      │
│   Protection    │    │   Validation    │    │   Encryption    │
└─────────────────┘    └─────────────────┘    └─────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              DATA FLOW SUMMARY                                  │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   User Input    │    │   AI Processing │    │   Component     │
│   (Natural      │───►│   (Gemini API)  │───►│   Generation    │
│   Language)     │    │                 │    │   (JSX/CSS)     │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Frontend      │    │   Backend       │    │   Live Preview  │
│   Processing    │◄───│   Response      │◄───│   (Real-time)   │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Session       │    │   Database      │    │   Code Export   │
│   Management    │───►│   Storage       │───►│   (Download)    │
└─────────────────┘    └─────────────────┘    └─────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              TECHNOLOGY STACK                                  │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Frontend      │    │   Backend       │    │   Database      │
│   • React 18    │    │   • Node.js     │    │   • MongoDB     │
│   • Vite        │    │   • Express.js  │    │   • Mongoose    │
│   • Zustand     │    │   • JWT         │    │   • Atlas       │
│   • Router DOM  │    │   • bcryptjs    │    │                 │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   AI Service    │    │   Deployment    │    │   Monitoring    │
│   • Google      │    │   • Vercel      │    │   • Render      │
│     Gemini      │    │   • Render      │    │   • Atlas       │
│   • Rate Limit  │    │   • GitHub      │    │   • Health      │
│   • 5 req/min   │    │   • CI/CD       │    │     Checks      │
└─────────────────┘    └─────────────────┘    └─────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              LIVE APPLICATION                                  │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Frontend      │    │   Backend       │    │   Database      │
│   https://      │    │   https://      │    │   MongoDB       │
│   acciojob-nine.│    │   acciojob-i0xu.│    │   Atlas         │
│   vercel.app    │    │   onrender.com  │    │   Cloud         │
└─────────────────┘    └─────────────────┘    └─────────────────┘

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   User          │    │   Frontend      │    │   Backend       │
│   Interface     │───►│   (React)       │───►│   (Express)     │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         ▲                       │                       │
         │                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Live Preview  │    │   State Mgmt    │    │   AI Service    │
│   (Real-time)   │◄───│   (Zustand)     │◄───│   (Gemini)      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Session       │    │   Database      │    │   Component     │
│   Management    │───►│   (MongoDB)     │───►│   Generation    │
└─────────────────┘    └─────────────────┘    └─────────────────┘


1. System Overview
This document outlines the architecture of a full-stack web-based platform for generating reusable UI components powered by AI. The system consists of a React frontend, Node.js backend, MongoDB database, and integration with Google Gemini AI.

2. Architecture Layers
A. Frontend Architecture
Framework: React 18

Bundler: Vite

Routing: React Router

State Management: Zustand

Components:

Authentication (Login/Register)

Chat Interface for AI prompts

Live Preview for component rendering

Session Manager (Save/Load)

Code Export and File Download

Services: API interaction via axios, Custom Hooks for session and auto-save

Utilities: Authentication handling, code processing, and configuration logic

Deployment: Vercel

B. Backend Architecture
Runtime: Node.js

Framework: Express.js

Authentication: JWT and bcryptjs

Rate Limiting: express-rate-limit (5 requests/min per user)

Controllers:

Auth Controller for user registration and login

Chat Controller for AI requests

Session Controller for CRUD operations

Middleware:

Auth Middleware for token validation

CORS configuration for production domains

Hosting: Render

C. Database Architecture
Database: MongoDB

ODM: Mongoose

Cloud Hosting: MongoDB Atlas

Collections:

User Model (authentication data)

Session Model (chat history and code)

Features: Cloud backups, encryption, and access control

D. AI Integration
Provider: Google Gemini AI

Model: gemini-1.5-flash

Functionality: JSX/CSS code generation based on user prompts

Rate Limit: 5 requests per minute per user

E. Security Architecture
Frontend Security:

HTTPS (SSL encryption)

Content Security Policy

XSS Protection

Backend Security:

JWT-based route protection

Password hashing with bcryptjs

CORS enforcement

Rate Limiting

Input Validation

Database Security:

Data encryption

Access control policies

Automated backups

API Security:

Protected routes with Auth Middleware

Secure API keys

3. Deployment Architecture
A. Development Environment
Local Frontend: http://localhost:5173

Local Backend: http://localhost:5000

Local Database: MongoDB Community Server

B. Production Environment
Frontend: Hosted on Vercel at https://acciojob-nine.vercel.app

Backend: Hosted on Render at https://acciojob-i0xu.onrender.com

Database: MongoDB Atlas (Cloud-hosted)

4. Data Flow Summary
User Authentication: React sends credentials to backend, backend verifies and issues JWT.

Component Generation: Authenticated requests are processed via the Chat Controller, forwarded to Gemini AI, and saved to sessions.

Session Management: Users can save and retrieve sessions from MongoDB.

Auto-Save: Frontend triggers auto-save on input changes after a short delay.

Security: All routes protected with JWT and CORS, rate-limited API access.

5. Summary
Frontend: React, Zustand, Vite, deployed on Vercel

Backend: Node.js, Express.js, secured with JWT, deployed on Render

Database: MongoDB with Mongoose, hosted on MongoDB Atlas

AI Integration: Google Gemini AI for JSX/CSS generation

Deployment: GitHub CI/CD pipeline with secure environment configuration

