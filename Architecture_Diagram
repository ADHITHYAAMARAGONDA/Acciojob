Multi-Component Generator Platform â€“ System Architecture
1. System Overview
This document outlines the architecture of a full-stack web-based platform for generating reusable UI components powered by AI. The system consists of a React frontend, Node.js backend, MongoDB database, and integration with Google Gemini AI.

2. Architecture Layers
A. Frontend Architecture
Framework: React 18

Bundler: Vite

Routing: React Router

State Management: Zustand

Components:

Authentication (Login/Register)

Chat Interface for AI prompts

Live Preview for component rendering

Session Manager (Save/Load)

Code Export and File Download

Services: API interaction via axios, Custom Hooks for session and auto-save

Utilities: Authentication handling, code processing, and configuration logic

Deployment: Vercel

B. Backend Architecture
Runtime: Node.js

Framework: Express.js

Authentication: JWT and bcryptjs

Rate Limiting: express-rate-limit (5 requests/min per user)

Controllers:

Auth Controller for user registration and login

Chat Controller for AI requests

Session Controller for CRUD operations

Middleware:

Auth Middleware for token validation

CORS configuration for production domains

Hosting: Render

C. Database Architecture
Database: MongoDB

ODM: Mongoose

Cloud Hosting: MongoDB Atlas

Collections:

User Model (authentication data)

Session Model (chat history and code)

Features: Cloud backups, encryption, and access control

D. AI Integration
Provider: Google Gemini AI

Model: gemini-1.5-flash

Functionality: JSX/CSS code generation based on user prompts

Rate Limit: 5 requests per minute per user

E. Security Architecture
Frontend Security:

HTTPS (SSL encryption)

Content Security Policy

XSS Protection

Backend Security:

JWT-based route protection

Password hashing with bcryptjs

CORS enforcement

Rate Limiting

Input Validation

Database Security:

Data encryption

Access control policies

Automated backups

API Security:

Protected routes with Auth Middleware

Secure API keys

3. Deployment Architecture
A. Development Environment
Local Frontend: http://localhost:5173

Local Backend: http://localhost:5000

Local Database: MongoDB Community Server

B. Production Environment
Frontend: Hosted on Vercel at https://acciojob-nine.vercel.app

Backend: Hosted on Render at https://acciojob-i0xu.onrender.com

Database: MongoDB Atlas (Cloud-hosted)

4. Data Flow Summary
User Authentication: React sends credentials to backend, backend verifies and issues JWT.

Component Generation: Authenticated requests are processed via the Chat Controller, forwarded to Gemini AI, and saved to sessions.

Session Management: Users can save and retrieve sessions from MongoDB.

Auto-Save: Frontend triggers auto-save on input changes after a short delay.

Security: All routes protected with JWT and CORS, rate-limited API access.

5. Summary
Frontend: React, Zustand, Vite, deployed on Vercel

Backend: Node.js, Express.js, secured with JWT, deployed on Render

Database: MongoDB with Mongoose, hosted on MongoDB Atlas

AI Integration: Google Gemini AI for JSX/CSS generation

Deployment: GitHub CI/CD pipeline with secure environment configuration

